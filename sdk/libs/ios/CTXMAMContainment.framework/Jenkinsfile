@Library('PacMan') _

// Utility functions
isMaster = (env.BRANCH_NAME == 'master')
isDevelop = (env.BRANCH_NAME == 'develop')
isPR = (env.BRANCH_NAME.startsWith("PR-"))
isRelease = (env.BRANCH_NAME.startsWith("Release_"))

// Code to handle build retention etc., to be replaced by PacMan code when available
//

// No build blockers configured
def buildBlocker = [$class: 'BuildBlockerProperty', useBuildBlocker: false]
// No scanner job configured
def scannerJob = [$class: 'ScannerJobProperty', doNotScan: false]
// No job throttling configured - note only some throttling uses properties - others use a throttle statement
def throttleJob = [$class: 'ThrottleJobProperty', throttleEnabled: false]
// Sets a trigger to scan branches, so that old branch jobs get deleted
def trigger = [$class: 'PeriodicFolderTrigger', interval: '2d']
// This sets the standard retention policy for XM - please do not change without consulting #xm-ci-support

// When publishing to Artifactory using the PacMan library, please use
// keepDays and keepNum for the retention.

if (isMaster || isDevelop || isRelease) {
    keepDays = '365'
    keepNum = '30'
    artifactKeepDays=365
    artifactKeepNum=30
} else {
    if (isPR) {
        keepDays = '14'
        keepNum = ''
        artifactKeepDays=14
        artifactKeepNum=-1
    } else {
        keepDays = '30'
        keepNum = '5'
        artifactKeepDays=30
        artifactKeepNum=5
    }
}

// If other properties are to be set, add them here. Do not use additional properties statements, because they would nullify this one.
properties([buildBlocker,
            buildDiscarder(logRotator(daysToKeepStr: keepDays, numToKeepStr: keepNum)),
            disableConcurrentBuilds (),
            scannerJob,
            throttleJob,
            pipelineTriggers([trigger])])
// End of build retention code

// Definitions for environment
xcode_version = "Xcode11.3.1"
cocoapods_version = "cocoapods_1.9.1"
developer_dir = '/Applications/' + xcode_version + '.app/Contents/Developer'
sdk_version = ''
sim_runtime = ''
sim_device = 'iPhone X'
SDK_Name = 'iOSSDK_CTXMAMContainment'
Workspace_Name = 'CTXMAMContainment'
Build_Scheme = 'CTXMAMContainment'
Test_Scheme = 'CTXMAMContainment'

throttle (['iOS_Simulator_or_Android_Emulator']) {
    timestamps {
        // Node should include MacOS later, when testing for new cocoapods is done
        node (xcode_version + " && (Catalina || " + cocoapods_version + ")") {
            stage ('Checkout') {
                def scmData
                retry(3) {
                    timeout (3) {
                        deleteDir()
                        scmData = checkout(scm)
                    }
                }
                pacmanGrafeas.createBuildNoteAndOccurrence gitParams: scmData
            }

            withEnv ([ "XCODE_VERSION=${xcode_version}",
                       "DEVELOPER_DIR=${developer_dir}",
                       "IOS_SCRIPTS=${env.WORKSPACE}/_scripts/iOS" ]) {

                stage ('Prepare') {
                    timeout(3) {
                        echo "Prepare"

                        sh (script: '''#!/bin/bash
                                       source ${TOOLS}/mac-build-scripts/iOS/get_scripts.sh
                                       get_scripts''')

                        change = sh (script: '''#!/bin/bash
                                                git log -1 --pretty=oneline''',
                                     returnStdout: true)
                        commit = change.minus(~/ .*/)
                        echo "========================================================="
                        echo "Commit being built: " + commit
                        echo "========================================================="

                        sh (script: '''#!/bin/bash
                                       source ${IOS_SCRIPTS}/build_functions.sh
                                       kill_simulator_process''')

                        license_ok = sh (returnStatus: true,
                                         script: '''#!/bin/bash
                                                    source ${IOS_SCRIPTS}/build_functions.sh
                                                    accept_xcode_license''')
                        if (license_ok != 0) {
                            error "Xcode license accept failed, Xcode version may not be available"
                        }

                        sdk = sh (script: '''#!/bin/bash
                                             source ${IOS_SCRIPTS}/set_functions.sh
                                             set_sdk''',
                                  returnStdout: true)
                        sdk_version = sdk.minus(~/.*version is: /)
                        sdk_version = sdk_version.trim()
                        echo "SDK version: ---" + sdk_version + "---"

                        sim = sh (script: '''#!/bin/bash
                                             source ${IOS_SCRIPTS}/set_functions.sh
                                             set_simulator_runtime''',
                                  returnStdout: true)
                        sim_runtime = sim.minus(~/.*version is: /)
                        sim_runtime = sim_runtime.trim()
                        echo "Simulator Runtime: ---" + sim_runtime + "---"

                        sh (script: '''#!/bin/bash
                                       # For informational purposes
                                       xcodebuild -version
                                       xcodebuild -showsdks
                                       xcodebuild -list -workspace *.xcworkspace''')

                        withCredentials([string(credentialsId: 'KEYCHAIN_PW', variable: 'BUILD_PW')]) {
                            sh (script: '''#!/bin/bash
                                           source ${IOS_SCRIPTS}/build_functions.sh
                                           unlock_keychain''' )
                        }
                    }
                }

                withEnv ([ "SDK_VERSION=${sdk_version}",
                           "SIM_RUNTIME=${sim_runtime}",
                           "SIM_DEVICE=${sim_device}",
                           "CODE_COVERAGE=false",
                           "WORKSPACE_NAME=${Workspace_Name}",
                           "SCHEME_NAME=${Test_Scheme}",
                           "LOG_DIR=${env.WORKSPACE}/Logs" ]) {

                    stage ('Unit Tests') {
                        timeout (5) {
                            echo "Now we Test!!!"
                            test_result = sh (returnStatus : true,
                                              script: '''#!/bin/bash
                                                         ${IOS_SCRIPTS}/sdk_unit_tests.sh -w "${WORKSPACE_NAME}" -s "${SCHEME_NAME}"''')
                            if (test_result != 0) {
//                          emailSubject = 'Jenkins job ' + env.JOB_NAME + ' failed'
//                          emailContent = env.BUILD_URL + ' failed when running build and unit tests'
//                          emailTo = 'omkar.ramtekkar@citrix.com, mpg-ci-team@citrix.com'
//                          emailext mimetype: 'text/html', attachLog: false, body: emailContent, recipientProviders: [developers()], to: emailTo, replyTo: '#MPG-CI-Team@citrite.net', subject: emailSubject

                                // Publish test results
                                junit testResults: 'reports/unit_test/junit/*.xml', allowEmptyResults: true
                                publish_logs_only()
                                error "Build or Unit test run FAILED"
                            } else {
                                echo "Unit Tests Successfull...!!!"
                            }
                        }
                    }

                    stage ('SonarQube Analysis') {
                        timeout(1) {
                            echo "Run static analysis using Sonarqube"
                            echo "----- Not yet implemented"
                        }
                    }

                    stage ('Build') {
                        timeout (5) {
                            echo "Now the device build"

                            build_result = sh (returnStatus : true,
                                               script: '''#!/bin/bash
                                                          ${IOS_SCRIPTS}/sdk_build.sh -w "${WORKSPACE_NAME}" -s "${SCHEME_NAME}"''')
                            if (build_result != 0) {
                                // Publish test results
                                junit testResults: 'reports/unit_test/junit/*.xml', allowEmptyResults: true
                                publish_logs_only()
                                error "Device build FAILED"
                            } else {
                                echo "Build Successfull...!!!"
                            }
                        }
                    }

                    if (! isPR) {
                        stage ('Universal Framework') {
                            timeout (3) {
                                echo "Combine simuator and device frameworks"

                                fat_result = sh (returnStatus : true,
                                                   script: '''#!/bin/bash
                                                              ${IOS_SCRIPTS}/sdk_fat_framework.sh -f "${WORKSPACE_NAME}"''')
                                if (fat_result != 0) {
                                    // Publish test results
                                    junit testResults: 'reports/unit_test/junit/*.xml', allowEmptyResults: true
                                    publish_logs_only()
                                    error "Universal frammework creation FAILED"
                                } else {
                                    zip_result = sh (returnStatus : true,
                                                      script: '''#!/bin/bash
                                                                 ${IOS_SCRIPTS}/sdk_framework_symbols.sh -f "${WORKSPACE_NAME}"''')
                                    if (zip_result != 0) {
                                        // Publish test results
                                        junit testResults: 'reports/unit_test/junit/*.xml', allowEmptyResults: true
                                        publish_logs_only()
                                        error "Zip of symbols FAILED"
                                    }
                                }
                            }
                        }
                    }
                }
            }

            stage ('Publish Results') {
                timeout (2) {
                    // Publish test results
                    junit testResults: 'reports/unit_test/junit/*.xml', allowEmptyResults: true

                    // Publish code-coverage data
          //          cobertura coberturaReportFile: 'reports/coverage-reports/cobertura.xml', failNoReports: false
                }
            }

            stage ('Publish to Artifactory') {
                timeout (5) {
                    publish_all()
                }
            }

            stage ('Cleanup') {
                timeout (1) {
                    echo "Will delete workspace, once testing complete"
//                  deleteDir ()
                }
            }
        }
    }
}

def publish_logs_only() {
    target_dir = 'iOS/' + SDK_Name
    pacmanArtifactory.push(
        artifactoryServer:    "Artifactory_Miami",
        repository:           "xm-local-build-logs",
        sourceTargets:        [[source: "Logs/*",
                                target: "${target_dir}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/"]],
        maxBuilds:            artifactKeepNum,
        maxDays:              artifactKeepDays,
        deleteBuildArtifacts: true,
        uploadBuildInfo:      true)
}

def publish_all() {
    def buildData
    target_dir = 'iOS/' + SDK_Name

    // Publish build logs
    buildData = pacmanArtifactory.push(artifactoryServer:
                    "Artifactory_Miami",
                    repository:           "xm-local-build-logs",
                    sourceTargets:        [[source: "Logs/*",
                                            target: "${target_dir}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/"]],
                    maxBuilds:            artifactKeepNum,
                    maxDays:              artifactKeepDays,
                    deleteBuildArtifacts: true,
                    uploadBuildInfo:      false)

    if (! isPR) {
        // Publish build frameworks
        buildData = pacmanArtifactory.push(
            artifactoryServer:    "Artifactory_Miami",
            repository:           "xm-local-build",
            sourceTargets:        [[source: "${Workspace_Name}.zip",
                                    target: "${target_dir}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/"],
                                   [source: "${Workspace_Name}-dSYM*.zip",
                                    target: "${target_dir}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/"]],
            maxBuilds:            artifactKeepNum,
            maxDays:              artifactKeepDays,
            deleteBuildArtifacts: true,
            existingBuildInfo:    buildData,
            uploadBuildInfo:      false)
    }

    // Publish build info
    pacmanArtifactory.uploadBuildInfo(
        artifactoryServer:    "Artifactory_Miami",
        buildInfo:            buildData,
        maxBuilds:            artifactKeepNum,
        maxDays:              artifactKeepDays,
        deleteBuildArtifacts: true)
}
